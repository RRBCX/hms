<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- Configure to plugin JSON as request and response in method handler -->
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</beans:bean>	
	
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mysql://127.0.0.1:3306/hms" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="admin@123" />
		
	</beans:bean>
	
	<!-- Hibernate 4 SessionFactory Bean definition starts here-->
	<beans:bean id="hibernate4AnnotatedSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				  
				  <!-- Master Tables Configuration Starts Here -->
				  <beans:value>com.ds.hms.pojo.Tblstatusmaster</beans:value>
				  <beans:value>com.ds.hms.pojo.Tblsequence</beans:value>
				  <beans:value>com.ds.hms.pojo.Tbladdress</beans:value>
				  <beans:value>com.ds.hms.pojo.Tblcountry</beans:value>
				  <beans:value>com.ds.hms.pojo.Tblstate</beans:value>
				  <beans:value>com.ds.hms.pojo.Tblcity</beans:value>
				  <beans:value>com.ds.hms.pojo.Tblcompany</beans:value>
				  <beans:value>com.ds.hms.pojo.Tbldoctor</beans:value>
				  <beans:value>com.ds.hms.pojo.Tblpatient</beans:value>
				  <beans:value>com.ds.hms.pojo.Tblcreation</beans:value>
				  <beans:value>com.ds.hms.pojo.TblLabitemmaster</beans:value>
				  <beans:value>com.ds.hms.pojo.TblHospitalitemmaster</beans:value>
				  <beans:value>com.ds.hms.pojo.TblCategory</beans:value>
				  
				  <!-- Login Representated Screens Starts Here -->
				  
				  <beans:value>com.ds.hms.pojo.Tbluser</beans:value>
				  <beans:value>com.ds.hms.pojo.Tblrole</beans:value>
				  
				  <!-- Payroll Main Navigational code related pojo Starts Here -->
				  
				  <!-- Payroll Main Navigational code related pojo Ends Here -->
				  
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</beans:prop>
				 <beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
				<beans:prop key="current_session_context_class">thread</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<!-- Hibernate 4 SessionFactory Bean definition ends here-->
	
	<!-- Scans the classpath for annotated components that will be auto-registered as Spring beans.
	 For example @Controller, @Component and @Service. Make sure to set the correct base-package-->
	 
	 <context:component-scan base-package="com.ds.hms.controller" />
	
	<context:annotation-config/>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
	
	<!-- Service layer Autowire starts here -->
	<beans:bean id="commonService" class="com.ds.utils.serviceimpl.CommonserviceImpl" />
	<beans:bean id="generateDAO" class="com.ds.utils.serviceimpl.GeneratedDAOIMPL" />
	<beans:bean id="authenticationService" class="com.ds.hms.serviceimpl.AuthenticationserviceImpl" />
	<beans:bean id="masterService" class="com.ds.hms.serviceimpl.MasterServiceImpl" />
	<!-- Service layer Autowire ends here -->
	
	<!-- DAO layer Autowire starts here -->
	<beans:bean id="authenticationDAO" class="com.ds.hms.daoimpl.AuthenticationDAOIMPL" />
	<beans:bean id="masterDao" class="com.ds.hms.daoimpl.MasterDaoImpl" />
	<beans:bean id="sendEmail" class="com.ds.hms.utils.SendEmail" />
	<!-- DAO layer Autowire ends here -->
    		
</beans:beans>
